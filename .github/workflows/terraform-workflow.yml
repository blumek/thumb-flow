name: Terraform Workflow

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to (dev, stage, prod)'
        required: true
        type: string
      apply:
        description: 'Whether to apply the changes or just plan'
        required: false
        default: false
        type: boolean
      image-variables:
        description: 'JSON object with image URIs'
        required: false
        type: string
        default: '{}'
      terraform-version:
        description: 'Terraform version to use'
        required: false
        default: '1.12.2'
        type: string
    outputs:
      plan-exitcode:
        description: "The exit code of terraform plan"
        value: ${{ jobs.terraform.outputs.plan_exitcode }}
    secrets:
      AWS_ROLE_ARN:
        required: true

env:
  AWS_REGION: eu-central-1

jobs:
  terraform:
    name: Terraform for ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      plan_exitcode: ${{ steps.plan.outputs.exitcode }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform-version }}

      - name: Set image variables
        id: set-vars
        env:
          IMAGE_VARS: ${{ inputs.image-variables }}
        run: |
          # Parse the JSON input and create TF_VAR_ environment variables
          if [[ -n "$IMAGE_VARS" ]]; then
            echo "$IMAGE_VARS" | jq -r 'fromjson | to_entries | .[] | "TF_VAR_\(.key)=\(.value)"' >> $GITHUB_ENV
          fi

      - name: Terraform Init
        run: |
          cd terraform/environments/${{ inputs.environment }}
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform/environments/${{ inputs.environment }}
          terraform plan -out=tfplan -input=false
          
          # Zapisz kod wyjÅ›cia planu
          echo "exitcode=$?" >> $GITHUB_OUTPUT
          
          # Zapisz plan jako artifact
          terraform show -json tfplan > tfplan.json

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ inputs.environment }}
          path: terraform/environments/${{ inputs.environment }}/tfplan.json

      - name: Manual approval for Production
        if: inputs.apply && inputs.environment == 'prod'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ github.repository_owner }}
          minimum-approvals: 1
          issue-title: "Approval of implementation into production"
          issue-body: "Please approve the deployment to the production environment"
          exclude-workflow-initiator-as-approver: false
          timeout-minutes: 60

      - name: Terraform Apply
        if: inputs.apply
        run: |
          cd terraform/environments/${{ inputs.environment }}
          terraform apply -auto-approve -input=false
