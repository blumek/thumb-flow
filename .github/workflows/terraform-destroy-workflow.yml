name: Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        type: choice
        options:
          - dev
          - prod
      confirmation:
        description: 'Type "DESTROY" to confirm destruction of infrastructure'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  TF_VERSION: '1.12.2'

permissions:
  id-token: write
  contents: read
  deployments: write

jobs:
  terraform-destroy:
    name: Destroy ${{ inputs.environment }} environment
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}

    if: ${{ inputs.confirmation == 'DESTROY' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: terraform/environments/${{ inputs.environment }}
        run: terraform init

      - name: Terraform Plan Destroy
        working-directory: terraform/environments/${{ inputs.environment }}
        run: terraform plan -destroy -out=tfdestroyplan

      - name: Terraform Destroy
        working-directory: terraform/environments/${{ inputs.environment }}
        run: terraform apply -auto-approve tfdestroyplan

      - name: Create Deployment Status
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ inputs.environment }}',
              description: 'Destroy ${{ inputs.environment }} environment',
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: 'inactive',
              description: 'Infrastructure destroyed in ${{ inputs.environment }}',
              environment_url: 'https://console.aws.amazon.com/lambda'
            });